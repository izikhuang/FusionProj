/*
* Copyright (c) 2019-2021, NVIDIA CORPORATION.  All rights reserved.
*
* NVIDIA CORPORATION and its licensors retain all intellectual property
* and proprietary rights in and to this software, related documentation
* and any modifications thereto.  Any use, reproduction, disclosure or
* distribution of this software and related documentation without an express
* license agreement from NVIDIA CORPORATION is strictly prohibited.
*/

#include "/Engine/Public/Platform.ush"
#include "/Engine/Private/GammaCorrectionCommon.ush"


float4x4 ScreenToTranslatedWorld;
Texture2D<float4> AlphaCoreColor;


void MainVS(
    in uint VertexId : SV_VertexID,
    out float4 OutPosition : SV_POSITION,
    out float3 OutScreenVector : TEXCOORD0)
{
    float2 uv = float2((VertexId << 1) & 2, VertexId & 2);
    OutPosition = float4(uv * float2(2.0f, -2.0f) + float2(-1.0f, 1.0f), 0.0f, 1.0f);
    OutScreenVector = mul(float4(OutPosition.xy, 1, 0), ScreenToTranslatedWorld).xyz;
}

void MainPS(
    float4 SvPosition : SV_POSITION,
    float3 InScreenVector : TEXCOORD0,
    out float4 OutColor : SV_Target0
    )
{
    int2 PixelPos = int2(SvPosition.xy);

    // get information about our pixel
	OutColor = AlphaCoreColor.Load(int3(PixelPos, 0));
}
