#ifndef __AXCATALYST_SIMPARAM_PROTOCOL_H__
#define __AXCATALYST_SIMPARAM_PROTOCOL_H__


#include <AxMacro.h>
#include <Utility/AxParameter.h>
#include <AxParameterJsonHelper.h>

//SimParameter
FSA_CLASS class AxCatalystSimParam
{
public:
    AxCatalystSimParam()
    {
        Init();
    }
    ~AxCatalystSimParam()
    {

    }
    AxFloatParam BuoyancyScale;
    AxToggleParam EnableCombustion;
    AxToggleParam EnableDissipation;
    AxFloatParam VisualDensityItensity;
    AxFloatParam Emitscale;
    AxFloatParam Emitcdtemperature0;
    AxStringParam SourceDivergenceFieldName;
    AxFloatParam VorticityConfinementMaskWeight;
    AxFloatParam FuelAdvectSpeed;
    AxToggleParam EnableUltraTurbFire;
    AxFloatParam IgnitionTemperature;
    AxToggleParam Cdrangeoverride;
    AxFloatParam CurlNoiseIntensity;
    AxVector3FParam BuoyancyDirection;
    AxIntParam Substeps;
    AxFloatParam FireColdDownTime;
    AxStringParam Shred_control_field;
    AxFloatParam Shred_control_influence;
    AxRampCurve32RAWData UltraTurbSmokeRamp;
    AxToggleParam Emitrangeoverride;
    AxIntParam Cdpreset;
    AxFloatParam DistortionScale;
    AxFloatParam BurnRate;
    AxToggleParam EnableClosedBoundary;
    AxStringParam Cdfield;
    AxStringParam SourceVelFieldName;
    AxVector3FParam WindDirection;
    AxRampCurve32RAWData CurlNoiseMaskRamp;
    AxIntParam Emitrampmode;
    AxVector3FParam Rotate;
    AxFloatParam SourceVelScale;
    AxFloatParam WindSpeed;
    //AxRampCurve32RAWData VisualEmissionColorRamp;
    AxIntParam FPS;
    AxVector2FParam VorticityConfinementMaskRange;
    AxStringParam VisDensityFieldName;
    AxToggleParam YBoundary2;
    AxVector2IParam TaskFrameRange;
    AxToggleParam EnableEmitFuel;
    AxFloatParam CurlNoiseScale;
    AxFloatParam UltraTurbSmokeThreshold;
    AxToggleParam Remap_control_field;
    AxFloatParam DissipationScale;
    AxFloatParam Emitcdburn;
    AxFloatParam CurlNoiseSeed;
    AxVector2FParam Emitrange;
    //AxRampCurve32RAWData VisualDensityColorRamp;
    AxFloatParam SourceDensityScale;
    AxFloatParam HeatRate;
    AxIntParam PressureIterations;
    AxFloatParam SourceTemperatureScale;
    AxRampCurve32RAWData UltraTurbFireRamp;
    AxStringParam CurlNoiseMaskFieldName;
    AxFloatParam Explosion;
    AxFloatParam SourceFuelScale;
    AxStringParam ExecuteCommand;
    AxToggleParam ZBoundary2;
    AxIntParam Cdrampmode;
    AxVector2FParam CurlNoiseMaskRange;
    AxIntParam Emitcdrampmode;
    AxFloatParam FireUltraTurbScale;
    AxStringParam WorkSpace;
    AxStringParam EmitterCacheReadFilePath;
    AxIntParam Emitpreset;
    AxStringParam Emitcdfield;
    AxIntParam CurlNoiseTurbulence;
    AxToggleParam EnableEmitDivergence;
    AxFloatParam SmokeAmount;
    AxFloatParam DistortionThreshold;
    AxFloatParam WindIntensity;
    AxToggleParam Emitcdtonemap;
    AxVector2FParam Shred_control_range;
    AxFloatParam CurlSwirlSize;
    AxToggleParam EnableUltraTurbDensity;
    AxToggleParam EnableDissipationMaskField;
    AxFloatParam UltraTurbFireRampWeight;
    AxFloatParam CurlTimeFrequency;
    AxRampCurve32RAWData VorticityConfinementMaskRamp;
    AxToggleParam XBoundary2;
    AxFloatParam FuelReactionRate;
    AxRampCurve32RAWData Control_field_ramp;
    AxStringParam CacheOutFilePath;
    AxVector3FParam Pivot;
    AxVector3FParam Size;
    AxToggleParam EnableDistortionClipGradient;
    AxStringParam DissipationMaskFieldName;
    AxFloatParam UltraTurbSmokeRampWeight;
    AxToggleParam EnableDistortion;
    AxFloatParam UltraTurbFireThreshold;
    AxFloatParam Emitcdtemperature;
    AxToggleParam EnableEmitDensity;
    AxStringParam Emitfield;
    AxToggleParam EnableCurlNoiseMaskField;
    AxStringParam FireCoolingMaskField;
    AxToggleParam EnableVorticityConfinementMaskField;
    AxFloatParam DistorntionClipValue;
    AxIntParam CurlNoiseCore;
    AxFloatParam DistortionClampBelow;
    AxFloatParam Emitcdfieldscale;
    AxVector2FParam DissipationMaskRange;
    AxToggleParam EnableCurlNoise;
    AxVector2FParam Cdrange;
    AxToggleParam EnableCurlNoiseRamp;
    AxToggleParam UseKernelFuse;
    AxIntParam ReflectionType;
    AxFloatParam VisualShadowItensity;
    AxToggleParam FuelCreateSmoke;
    AxFloatParam VoxelSize;
    AxIntParam FieldBuildType;
    AxStringParam SourceTemperatureFieldName;
    AxVector2FParam Emitcdrange;
    AxVector3FParam SourceVelAddition;
    AxRampCurve32RAWData FireCoolingRamp;
    AxIntParam SolverMehtodCore;
    AxToggleParam EnableAdvectFuel;
    AxRampCurve32RAWData VisualEmissionRamp;
    AxFloatParam Emitcdadaptation;
    AxStringParam AlphaCommand;
    AxFloatParam UltraTurbSizeFire;
    AxIntParam FuelCreateSmokeSourceField;
    AxRampCurve32RAWData DissipationMaskRamp;
    AxFloatParam VorticityConfinementScale;
    AxToggleParam UseFireCoolingRamp;
    AxToggleParam EnableEmitTemperature;
    AxFloatParam UltraTurbScaleDensity;
    AxFloatParam ReflectionAmount;
    AxFloatParam DistortionPull;
    AxToggleParam Emitcdrangeoverride;
    AxStringParam SourceDensityFieldName;
    AxRampCurve32RAWData VisualDensityRamp;
    AxFloatParam SourceDivergenceScale;
    AxFloatParam TemperatureDiffusion;
    AxIntParam SourcingType;
    AxStringParam SourceFuelFieldName;
    AxToggleParam EnableEmitVelocity;
    AxFloatParam UltraTurbSizeSmoke;
    AxIntParam Emitcdpreset;
    AxToggleParam YBoundary;
    AxFloatParam DistortionPush;
    AxToggleParam EnableVorticityConfinement;
    AxFloatParam HeatCutoff;
    AxToggleParam EnableVorticityConfinementMaskRamp;
    AxIntParam ComputeArch;
    AxFloatParam CoolingRate;
    AxFloatParam CurlNoiseMaskWeight;
    AxToggleParam Shred_use_control_field;
    AxFloatParam TimeScale;
    AxStringParam VorticityConfinementMaskFieldName;
    AxFloatParam GSIterations;
    AxFloatParam CurlNoiseClampBelow;
    AxToggleParam ZBoundary;
    AxToggleParam XBoundary;
    AxFloatParam Blend;

    void FromJson(std::string jsonRawCode)
    {
        AX_INFO("AxCatalystSimParam : Read sim parameter form json file ... ");
        rapidjson::Document doc;
        if (doc.Parse(jsonRawCode.c_str()).HasParseError())
            return;
        if (!doc.HasMember("ParamMap"))
            return;
        auto& paramMap = doc["ParamMap"];
        if (!paramMap.IsObject())
            return;
        AlphaCore::JsonHelper::AxFloatParamDeserilization(BuoyancyScale, paramMap["buoyancyScale"]);
        AlphaCore::JsonHelper::AxToggleParamDeserilization(EnableCombustion, paramMap["enableCombustion"]);
        AlphaCore::JsonHelper::AxToggleParamDeserilization(EnableDissipation, paramMap["enableDissipation"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(VisualDensityItensity, paramMap["visualDensityItensity"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(Emitscale, paramMap["emitscale"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(Emitcdtemperature0, paramMap["emitcdtemperature0"]);
        AlphaCore::JsonHelper::AxStringParamDeserilization(SourceDivergenceFieldName, paramMap["sourceDivergenceFieldName"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(VorticityConfinementMaskWeight, paramMap["vorticityConfinementMaskWeight"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(FuelAdvectSpeed, paramMap["fuelAdvectSpeed"]);
        AlphaCore::JsonHelper::AxToggleParamDeserilization(EnableUltraTurbFire, paramMap["enableUltraTurbFire"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(IgnitionTemperature, paramMap["ignitionTemperature"]);
        AlphaCore::JsonHelper::AxToggleParamDeserilization(Cdrangeoverride, paramMap["cdrangeoverride"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(CurlNoiseIntensity, paramMap["curlNoiseIntensity"]);
        AlphaCore::JsonHelper::AxVector3FParamDeserilization(BuoyancyDirection, paramMap["buoyancyDirection"]);
        AlphaCore::JsonHelper::AxIntParamDeserilization(Substeps, paramMap["substeps"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(FireColdDownTime, paramMap["fireColdDownTime"]);
        AlphaCore::JsonHelper::AxStringParamDeserilization(Shred_control_field, paramMap["shred_control_field"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(Shred_control_influence, paramMap["shred_control_influence"]);
        AlphaCore::JsonHelper::AxRampCurve32RAWDataDeserilization(UltraTurbSmokeRamp, paramMap["ultraTurbSmokeRamp"]);
        AlphaCore::JsonHelper::AxToggleParamDeserilization(Emitrangeoverride, paramMap["emitrangeoverride"]);
        AlphaCore::JsonHelper::AxIntParamDeserilization(Cdpreset, paramMap["cdpreset"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(DistortionScale, paramMap["distortionScale"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(BurnRate, paramMap["burnRate"]);
        AlphaCore::JsonHelper::AxToggleParamDeserilization(EnableClosedBoundary, paramMap["enableClosedBoundary"]);
        AlphaCore::JsonHelper::AxStringParamDeserilization(Cdfield, paramMap["cdfield"]);
        AlphaCore::JsonHelper::AxStringParamDeserilization(SourceVelFieldName, paramMap["sourceVelFieldName"]);
        AlphaCore::JsonHelper::AxVector3FParamDeserilization(WindDirection, paramMap["windDirection"]);
        AlphaCore::JsonHelper::AxRampCurve32RAWDataDeserilization(CurlNoiseMaskRamp, paramMap["curlNoiseMaskRamp"]);
        AlphaCore::JsonHelper::AxIntParamDeserilization(Emitrampmode, paramMap["emitrampmode"]);
        AlphaCore::JsonHelper::AxVector3FParamDeserilization(Rotate, paramMap["rotate"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(SourceVelScale, paramMap["sourceVelScale"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(WindSpeed, paramMap["windSpeed"]);
        //AlphaCore::JsonHelper::AxRampCurve32RAWDataDeserilization(VisualEmissionColorRamp, paramMap["VisualEmissionColorRamp"]);
        AlphaCore::JsonHelper::AxIntParamDeserilization(FPS, paramMap["fPS"]);
        AlphaCore::JsonHelper::AxVector2FParamDeserilization(VorticityConfinementMaskRange, paramMap["vorticityConfinementMaskRange"]);
        AlphaCore::JsonHelper::AxStringParamDeserilization(VisDensityFieldName, paramMap["visDensityFieldName"]);
        AlphaCore::JsonHelper::AxToggleParamDeserilization(YBoundary2, paramMap["yBoundary2"]);
        AlphaCore::JsonHelper::AxVector2IParamDeserilization(TaskFrameRange, paramMap["taskFrameRange"]);
        AlphaCore::JsonHelper::AxToggleParamDeserilization(EnableEmitFuel, paramMap["enableEmitFuel"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(CurlNoiseScale, paramMap["curlNoiseScale"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(UltraTurbSmokeThreshold, paramMap["ultraTurbSmokeThreshold"]);
        AlphaCore::JsonHelper::AxToggleParamDeserilization(Remap_control_field, paramMap["remap_control_field"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(DissipationScale, paramMap["dissipationScale"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(Emitcdburn, paramMap["emitcdburn"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(CurlNoiseSeed, paramMap["curlNoiseSeed"]);
        AlphaCore::JsonHelper::AxVector2FParamDeserilization(Emitrange, paramMap["emitrange"]);
        //AlphaCore::JsonHelper::AxRampCurve32RAWDataDeserilization(VisualDensityColorRamp, paramMap["visualDensityColorRamp"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(SourceDensityScale, paramMap["sourceDensityScale"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(HeatRate, paramMap["heatRate"]);
        AlphaCore::JsonHelper::AxIntParamDeserilization(PressureIterations, paramMap["pressureIterations"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(SourceTemperatureScale, paramMap["sourceTemperatureScale"]);
        AlphaCore::JsonHelper::AxRampCurve32RAWDataDeserilization(UltraTurbFireRamp, paramMap["ultraTurbFireRamp"]);
        AlphaCore::JsonHelper::AxStringParamDeserilization(CurlNoiseMaskFieldName, paramMap["curlNoiseMaskFieldName"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(Explosion, paramMap["explosion"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(SourceFuelScale, paramMap["sourceFuelScale"]);
        AlphaCore::JsonHelper::AxStringParamDeserilization(ExecuteCommand, paramMap["executeCommand"]);
        AlphaCore::JsonHelper::AxToggleParamDeserilization(ZBoundary2, paramMap["zBoundary2"]);
        AlphaCore::JsonHelper::AxIntParamDeserilization(Cdrampmode, paramMap["cdrampmode"]);
        AlphaCore::JsonHelper::AxVector2FParamDeserilization(CurlNoiseMaskRange, paramMap["curlNoiseMaskRange"]);
        AlphaCore::JsonHelper::AxIntParamDeserilization(Emitcdrampmode, paramMap["emitcdrampmode"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(FireUltraTurbScale, paramMap["fireUltraTurbScale"]);
        AlphaCore::JsonHelper::AxStringParamDeserilization(WorkSpace, paramMap["workSpace"]);
        AlphaCore::JsonHelper::AxStringParamDeserilization(EmitterCacheReadFilePath, paramMap["emitterCacheReadFilePath"]);
        AlphaCore::JsonHelper::AxIntParamDeserilization(Emitpreset, paramMap["emitpreset"]);
        AlphaCore::JsonHelper::AxStringParamDeserilization(Emitcdfield, paramMap["emitcdfield"]);
        AlphaCore::JsonHelper::AxIntParamDeserilization(CurlNoiseTurbulence, paramMap["curlNoiseTurbulence"]);
        AlphaCore::JsonHelper::AxToggleParamDeserilization(EnableEmitDivergence, paramMap["enableEmitDivergence"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(SmokeAmount, paramMap["smokeAmount"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(DistortionThreshold, paramMap["distortionThreshold"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(WindIntensity, paramMap["windIntensity"]);
        AlphaCore::JsonHelper::AxToggleParamDeserilization(Emitcdtonemap, paramMap["emitcdtonemap"]);
        AlphaCore::JsonHelper::AxVector2FParamDeserilization(Shred_control_range, paramMap["shred_control_range"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(CurlSwirlSize, paramMap["curlSwirlSize"]);
        AlphaCore::JsonHelper::AxToggleParamDeserilization(EnableUltraTurbDensity, paramMap["enableUltraTurbDensity"]);
        AlphaCore::JsonHelper::AxToggleParamDeserilization(EnableDissipationMaskField, paramMap["enableDissipationMaskField"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(UltraTurbFireRampWeight, paramMap["ultraTurbFireRampWeight"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(CurlTimeFrequency, paramMap["curlTimeFrequency"]);
        AlphaCore::JsonHelper::AxRampCurve32RAWDataDeserilization(VorticityConfinementMaskRamp, paramMap["vorticityConfinementMaskRamp"]);
        AlphaCore::JsonHelper::AxToggleParamDeserilization(XBoundary2, paramMap["xBoundary2"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(FuelReactionRate, paramMap["fuelReactionRate"]);
        AlphaCore::JsonHelper::AxRampCurve32RAWDataDeserilization(Control_field_ramp, paramMap["control_field_ramp"]);
        AlphaCore::JsonHelper::AxStringParamDeserilization(CacheOutFilePath, paramMap["cacheOutFilePath"]);
        AlphaCore::JsonHelper::AxVector3FParamDeserilization(Pivot, paramMap["pivot"]);
        AlphaCore::JsonHelper::AxVector3FParamDeserilization(Size, paramMap["size"]);
        AlphaCore::JsonHelper::AxToggleParamDeserilization(EnableDistortionClipGradient, paramMap["enableDistortionClipGradient"]);
        AlphaCore::JsonHelper::AxStringParamDeserilization(DissipationMaskFieldName, paramMap["dissipationMaskFieldName"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(UltraTurbSmokeRampWeight, paramMap["ultraTurbSmokeRampWeight"]);
        AlphaCore::JsonHelper::AxToggleParamDeserilization(EnableDistortion, paramMap["enableDistortion"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(UltraTurbFireThreshold, paramMap["ultraTurbFireThreshold"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(Emitcdtemperature, paramMap["emitcdtemperature"]);
        AlphaCore::JsonHelper::AxToggleParamDeserilization(EnableEmitDensity, paramMap["enableEmitDensity"]);
        AlphaCore::JsonHelper::AxStringParamDeserilization(Emitfield, paramMap["emitfield"]);
        AlphaCore::JsonHelper::AxToggleParamDeserilization(EnableCurlNoiseMaskField, paramMap["enableCurlNoiseMaskField"]);
        AlphaCore::JsonHelper::AxStringParamDeserilization(FireCoolingMaskField, paramMap["fireCoolingMaskField"]);
        AlphaCore::JsonHelper::AxToggleParamDeserilization(EnableVorticityConfinementMaskField, paramMap["enableVorticityConfinementMaskField"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(DistorntionClipValue, paramMap["distorntionClipValue"]);
        AlphaCore::JsonHelper::AxIntParamDeserilization(CurlNoiseCore, paramMap["curlNoiseCore"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(DistortionClampBelow, paramMap["distortionClampBelow"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(Emitcdfieldscale, paramMap["emitcdfieldscale"]);
        AlphaCore::JsonHelper::AxVector2FParamDeserilization(DissipationMaskRange, paramMap["dissipationMaskRange"]);
        AlphaCore::JsonHelper::AxToggleParamDeserilization(EnableCurlNoise, paramMap["enableCurlNoise"]);
        AlphaCore::JsonHelper::AxVector2FParamDeserilization(Cdrange, paramMap["cdrange"]);
        AlphaCore::JsonHelper::AxToggleParamDeserilization(EnableCurlNoiseRamp, paramMap["enableCurlNoiseRamp"]);
        AlphaCore::JsonHelper::AxToggleParamDeserilization(UseKernelFuse, paramMap["useKernelFuse"]);
        AlphaCore::JsonHelper::AxIntParamDeserilization(ReflectionType, paramMap["reflectionType"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(VisualShadowItensity, paramMap["visualShadowItensity"]);
        AlphaCore::JsonHelper::AxToggleParamDeserilization(FuelCreateSmoke, paramMap["fuelCreateSmoke"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(VoxelSize, paramMap["voxelSize"]);
        AlphaCore::JsonHelper::AxIntParamDeserilization(FieldBuildType, paramMap["fieldBuildType"]);
        AlphaCore::JsonHelper::AxStringParamDeserilization(SourceTemperatureFieldName, paramMap["sourceTemperatureFieldName"]);
        AlphaCore::JsonHelper::AxVector2FParamDeserilization(Emitcdrange, paramMap["emitcdrange"]);
        AlphaCore::JsonHelper::AxVector3FParamDeserilization(SourceVelAddition, paramMap["sourceVelAddition"]);
        AlphaCore::JsonHelper::AxRampCurve32RAWDataDeserilization(FireCoolingRamp, paramMap["fireCoolingRamp"]);
        AlphaCore::JsonHelper::AxIntParamDeserilization(SolverMehtodCore, paramMap["solverMehtodCore"]);
        AlphaCore::JsonHelper::AxToggleParamDeserilization(EnableAdvectFuel, paramMap["enableAdvectFuel"]);
        AlphaCore::JsonHelper::AxRampCurve32RAWDataDeserilization(VisualEmissionRamp, paramMap["visualEmissionRamp"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(Emitcdadaptation, paramMap["emitcdadaptation"]);
        AlphaCore::JsonHelper::AxStringParamDeserilization(AlphaCommand, paramMap["alphaCommand"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(UltraTurbSizeFire, paramMap["ultraTurbSizeFire"]);
        AlphaCore::JsonHelper::AxIntParamDeserilization(FuelCreateSmokeSourceField, paramMap["fuelCreateSmokeSourceField"]);
        AlphaCore::JsonHelper::AxRampCurve32RAWDataDeserilization(DissipationMaskRamp, paramMap["dissipationMaskRamp"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(VorticityConfinementScale, paramMap["vorticityConfinementScale"]);
        AlphaCore::JsonHelper::AxToggleParamDeserilization(UseFireCoolingRamp, paramMap["useFireCoolingRamp"]);
        AlphaCore::JsonHelper::AxToggleParamDeserilization(EnableEmitTemperature, paramMap["enableEmitTemperature"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(UltraTurbScaleDensity, paramMap["ultraTurbScaleDensity"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(ReflectionAmount, paramMap["reflectionAmount"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(DistortionPull, paramMap["distortionPull"]);
        AlphaCore::JsonHelper::AxToggleParamDeserilization(Emitcdrangeoverride, paramMap["emitcdrangeoverride"]);
        AlphaCore::JsonHelper::AxStringParamDeserilization(SourceDensityFieldName, paramMap["sourceDensityFieldName"]);
        AlphaCore::JsonHelper::AxRampCurve32RAWDataDeserilization(VisualDensityRamp, paramMap["visualDensityRamp"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(SourceDivergenceScale, paramMap["sourceDivergenceScale"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(TemperatureDiffusion, paramMap["temperatureDiffusion"]);
        AlphaCore::JsonHelper::AxIntParamDeserilization(SourcingType, paramMap["sourcingType"]);
        AlphaCore::JsonHelper::AxStringParamDeserilization(SourceFuelFieldName, paramMap["sourceFuelFieldName"]);
        AlphaCore::JsonHelper::AxToggleParamDeserilization(EnableEmitVelocity, paramMap["enableEmitVelocity"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(UltraTurbSizeSmoke, paramMap["ultraTurbSizeSmoke"]);
        AlphaCore::JsonHelper::AxIntParamDeserilization(Emitcdpreset, paramMap["emitcdpreset"]);
        AlphaCore::JsonHelper::AxToggleParamDeserilization(YBoundary, paramMap["yBoundary"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(DistortionPush, paramMap["distortionPush"]);
        AlphaCore::JsonHelper::AxToggleParamDeserilization(EnableVorticityConfinement, paramMap["enableVorticityConfinement"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(HeatCutoff, paramMap["heatCutoff"]);
        AlphaCore::JsonHelper::AxToggleParamDeserilization(EnableVorticityConfinementMaskRamp, paramMap["enableVorticityConfinementMaskRamp"]);
        AlphaCore::JsonHelper::AxIntParamDeserilization(ComputeArch, paramMap["computeArch"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(CoolingRate, paramMap["coolingRate"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(CurlNoiseMaskWeight, paramMap["curlNoiseMaskWeight"]);
        AlphaCore::JsonHelper::AxToggleParamDeserilization(Shred_use_control_field, paramMap["shred_use_control_field"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(TimeScale, paramMap["timeScale"]);
        AlphaCore::JsonHelper::AxStringParamDeserilization(VorticityConfinementMaskFieldName, paramMap["vorticityConfinementMaskFieldName"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(GSIterations, paramMap["gSIterations"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(CurlNoiseClampBelow, paramMap["curlNoiseClampBelow"]);
        AlphaCore::JsonHelper::AxToggleParamDeserilization(ZBoundary, paramMap["zBoundary"]);
        AlphaCore::JsonHelper::AxToggleParamDeserilization(XBoundary, paramMap["xBoundary"]);
        AlphaCore::JsonHelper::AxFloatParamDeserilization(Blend, paramMap["blend"]);

        AX_INFO("AxCatalystSimParam : Read sim parameter form json OVER !!! ");
    }

    void Init()
    {
        this->BuoyancyScale.Set(2.5f);
        this->EnableCombustion.Set(1);
        this->EnableDissipation.Set(0);
        this->VisualDensityItensity.Set(1.0f);
        this->Emitscale.Set(1.0f);
        this->Emitcdtemperature0.Set(0.0f);
        this->SourceDivergenceFieldName.Set("divergence");
        this->VorticityConfinementMaskWeight.Set(0.5f);
        this->FuelAdvectSpeed.Set(0.1f);
        this->EnableUltraTurbFire.Set(0);
        this->IgnitionTemperature.Set(0.1f);
        this->Cdrangeoverride.Set(1);
        this->CurlNoiseIntensity.Set(0.5f);
        this->BuoyancyDirection.Set(MakeVector3(0.0f, 1.0f, 0.0f));
        this->Substeps.Set(1);
        this->FireColdDownTime.Set(2.0f);
        this->Shred_control_field.Set("density");
        this->Shred_control_influence.Set(0.5f);
        AxFp32 ULTRATURBSMOKERAMP_RAWDATA[32] = { 0.0f, 0.032258063554763794f, 0.06451612710952759f, 0.09677419066429138f, 0.12903225421905518f, 0.16129031777381897f, 0.19354838132858276f, 0.22580644488334656f, 0.25806450843811035f, 0.29032257199287415f, 0.32258063554763794f, 0.35483869910240173f, 0.3870967626571655f, 0.4193548262119293f, 0.4516128897666931f, 0.4838709533214569f, 0.5161290168762207f, 0.5483871102333069f, 0.5806451439857483f, 0.6129032373428345f, 0.6451612710952759f, 0.6774193644523621f, 0.7096773982048035f, 0.7419354915618896f, 0.774193525314331f, 0.8064516186714172f, 0.8387096524238586f, 0.8709677457809448f, 0.9032257795333862f, 0.9354838728904724f, 0.9677419066429138f, 1.0 };
        this->UltraTurbSmokeRamp = MakeDefaultRampCurve32(ULTRATURBSMOKERAMP_RAWDATA);
        this->Emitrangeoverride.Set(1);
        this->Cdpreset.Set(0);
        this->DistortionScale.Set(0.5f);
        this->BurnRate.Set(0.9f);
        this->EnableClosedBoundary.Set(0);
        this->Cdfield.Set("density");
        this->SourceVelFieldName.Set("v");
        this->WindDirection.Set(MakeVector3(0.0f, 0.0f, 0.0f));
        AxFp32 CURLNOISEMASKRAMP_RAWDATA[32] = { 0.0f, 0.032258063554763794f, 0.06451612710952759f, 0.09677419066429138f, 0.12903225421905518f, 0.16129031777381897f, 0.19354838132858276f, 0.22580644488334656f, 0.25806450843811035f, 0.29032257199287415f, 0.32258063554763794f, 0.35483869910240173f, 0.3870967626571655f, 0.4193548262119293f, 0.4516128897666931f, 0.4838709533214569f, 0.5161290168762207f, 0.5483871102333069f, 0.5806451439857483f, 0.6129032373428345f, 0.6451612710952759f, 0.6774193644523621f, 0.7096773982048035f, 0.7419354915618896f, 0.774193525314331f, 0.8064516186714172f, 0.8387096524238586f, 0.8709677457809448f, 0.9032257795333862f, 0.9354838728904724f, 0.9677419066429138f, 1.0 };
        this->CurlNoiseMaskRamp = MakeDefaultRampCurve32(CURLNOISEMASKRAMP_RAWDATA);
        this->Emitrampmode.Set(1);
        this->Rotate.Set(MakeVector3(0.0f, 0.0f, 0.0f));
        this->SourceVelScale.Set(1.0f);
        this->WindSpeed.Set(1.0f);
        //AxFp32 VISUALEMISSIONCOLORRAMP_RAWDATA[32] = {{0.0f, 0.0f, 0.0}f, {0.004103829152882099f, 0.0f, 0.0}f, {0.008207658305764198f, 0.0f, 0.0}f, {0.012311488389968872f, 0.0f, 0.0}f, {0.016415316611528397f, 0.0f, 0.0}f, {0.02051914669573307f, 0.0f, 0.0}f, {0.024622976779937744f, 0.0f, 0.0}f, {0.02872680500149727f, 0.0f, 0.0}f, {0.03283063322305679f, 0.0f, 0.0}f, {0.036934465169906616f, 0.0f, 0.0}f, {0.04103829339146614f, 0.0f, 0.0}f, {0.05700970068573952f, 0.0f, 0.0}f, {0.09401503205299377f, 0.0f, 0.0}f, {0.13102036714553833f, 0.0f, 0.0}f, {0.1680256873369217f, 0.0f, 0.0}f, {0.20926912128925323f, 0.0f, 0.0}f, {0.25694870948791504f, 0.0f, 0.0}f, {0.30462831258773804f, 0.0f, 0.0}f, {0.35230788588523865f, 0.0f, 0.0}f, {0.39998748898506165f, 0.0f, 0.0}f, {0.44766709208488464f, 0.0f, 0.0}f, {0.49534666538238525f, 0.0f, 0.0}f, {0.5576346516609192f, 0.04457372799515724f, 0.0}f, {0.621759831905365f, 0.09475293755531311f, 0.0}f, {0.685884952545166f, 0.14493215084075928f, 0.0}f, {0.750010073184967f, 0.19511136412620544f, 0.0}f, {0.8141351938247681f, 0.2452905774116516f, 0.0}f, {0.8782603144645691f, 0.2954697906970978f, 0.0}f, {0.9422043561935425f, 0.3460036814212799f, 0.000751431449316442}f, {0.9614695310592651f, 0.4840090870857239f, 0.18683429062366486}f, {0.9807347655296326f, 0.6220145225524902f, 0.37291714549064636}f, {1.0f, 0.7600199580192566f, 0.5590000152587891}};
        //this->VisualEmissionColorRamp = MakeDefaultRampCurve32(VISUALEMISSIONCOLORRAMP_RAWDATA);
        this->FPS.Set(24);
        this->VorticityConfinementMaskRange.Set(MakeVector2(0.0f, 1.0f));
        this->VisDensityFieldName.Set("density");
        this->YBoundary2.Set(0);
        this->TaskFrameRange.Set(MakeVector2(1, 550));
        this->EnableEmitFuel.Set(0);
        this->CurlNoiseScale.Set(0.5f);
        this->UltraTurbSmokeThreshold.Set(0.15f);
        this->Remap_control_field.Set(0);
        this->DissipationScale.Set(0.01f);
        this->Emitcdburn.Set(0.0f);
        this->CurlNoiseSeed.Set(0.0f);
        this->Emitrange.Set(MakeVector2(0.0f, 1.0f));
        //AxFp32 VISUALDENSITYCOLORRAMP_RAWDATA[32] = {{0.07699999958276749f, 0.07699999958276749f, 0.07699999958276749}f, {0.10474193096160889f, 0.10474193096160889f, 0.10474193096160889}f, {0.13248386979103088f, 0.13248386979103088f, 0.13248386979103088}f, {0.1602257937192917f, 0.1602257937192917f, 0.1602257937192917}f, {0.18796773254871368f, 0.18796773254871368f, 0.18796773254871368}f, {0.21570967137813568f, 0.21570967137813568f, 0.21570967137813568}f, {0.24345161020755768f, 0.24345161020755768f, 0.24345161020755768}f, {0.2711935341358185f, 0.2711935341358185f, 0.2711935341358185}f, {0.2989354729652405f, 0.2989354729652405f, 0.2989354729652405}f, {0.3266774117946625f, 0.3266774117946625f, 0.3266774117946625}f, {0.3544193506240845f, 0.3544193506240845f, 0.3544193506240845}f, {0.38216128945350647f, 0.38216128945350647f, 0.38216128945350647}f, {0.40990322828292847f, 0.40990322828292847f, 0.40990322828292847}f, {0.43764516711235046f, 0.43764516711235046f, 0.43764516711235046}f, {0.4653870761394501f, 0.4653870761394501f, 0.4653870761394501}f, {0.49312901496887207f, 0.49312901496887207f, 0.49312901496887207}f, {0.5208709239959717f, 0.5208709239959717f, 0.5208709239959717}f, {0.5486128926277161f, 0.5486128926277161f, 0.5486128926277161}f, {0.5763548016548157f, 0.5763548016548157f, 0.5763548016548157}f, {0.6040967702865601f, 0.6040967702865601f, 0.6040967702865601}f, {0.6318386793136597f, 0.6318386793136597f, 0.6318386793136597}f, {0.659580647945404f, 0.659580647945404f, 0.659580647945404}f, {0.6873225569725037f, 0.6873225569725037f, 0.6873225569725037}f, {0.715064525604248f, 0.715064525604248f, 0.715064525604248}f, {0.7428064346313477f, 0.7428064346313477f, 0.7428064346313477}f, {0.7705483436584473f, 0.7705483436584473f, 0.7705483436584473}f, {0.7982903122901917f, 0.7982903122901917f, 0.7982903122901917}f, {0.8260322213172913f, 0.8260322213172913f, 0.8260322213172913}f, {0.8537741899490356f, 0.8537741899490356f, 0.8537741899490356}f, {0.8815160989761353f, 0.8815160989761353f, 0.8815160989761353}f, {0.9092580676078796f, 0.9092580676078796f, 0.9092580676078796}f, {0.9369999766349792f, 0.9369999766349792f, 0.9369999766349792}};
        //this->VisualDensityColorRamp = MakeDefaultRampCurve32(VISUALDENSITYCOLORRAMP_RAWDATA);
        this->SourceDensityScale.Set(1.0f);
        this->HeatRate.Set(0.25f);
        this->PressureIterations.Set(1);
        this->SourceTemperatureScale.Set(1.0f);
        AxFp32 ULTRATURBFIRERAMP_RAWDATA[32] = { 0.0f, 0.032258063554763794f, 0.06451612710952759f, 0.09677419066429138f, 0.12903225421905518f, 0.16129031777381897f, 0.19354838132858276f, 0.22580644488334656f, 0.25806450843811035f, 0.29032257199287415f, 0.32258063554763794f, 0.35483869910240173f, 0.3870967626571655f, 0.4193548262119293f, 0.4516128897666931f, 0.4838709533214569f, 0.5161290168762207f, 0.5483871102333069f, 0.5806451439857483f, 0.6129032373428345f, 0.6451612710952759f, 0.6774193644523621f, 0.7096773982048035f, 0.7419354915618896f, 0.774193525314331f, 0.8064516186714172f, 0.8387096524238586f, 0.8709677457809448f, 0.9032257795333862f, 0.9354838728904724f, 0.9677419066429138f, 1.0 };
        this->UltraTurbFireRamp = MakeDefaultRampCurve32(ULTRATURBFIRERAMP_RAWDATA);
        this->CurlNoiseMaskFieldName.Set("density");
        this->Explosion.Set(15.0f);
        this->SourceFuelScale.Set(1.0f);
        this->ExecuteCommand.Set("");
        this->ZBoundary2.Set(0);
        this->Cdrampmode.Set(1);
        this->CurlNoiseMaskRange.Set(MakeVector2(0.0f, 1.0f));
        this->Emitcdrampmode.Set(1);
        this->FireUltraTurbScale.Set(0.2f);
        this->Emitpreset.Set(0);
        this->Emitcdfield.Set("heat");
        this->CurlNoiseTurbulence.Set(2);
        this->EnableEmitDivergence.Set(0);
        this->SmokeAmount.Set(1.0f);
        this->DistortionThreshold.Set(0.75f);
        this->WindIntensity.Set(0.5f);
        this->Emitcdtonemap.Set(1);
        this->Shred_control_range.Set(MakeVector2(0.0f, 1.0f));
        this->CurlSwirlSize.Set(1.0f);
        this->EnableUltraTurbDensity.Set(0);
        this->EnableDissipationMaskField.Set(1);
        this->UltraTurbFireRampWeight.Set(0.5f);
        this->CurlTimeFrequency.Set(0.5f);
        AxFp32 VORTICITYCONFINEMENTMASKRAMP_RAWDATA[32] = { 0.0f, 0.032258063554763794f, 0.06451612710952759f, 0.09677419066429138f, 0.12903225421905518f, 0.16129031777381897f, 0.19354838132858276f, 0.22580644488334656f, 0.25806450843811035f, 0.29032257199287415f, 0.32258063554763794f, 0.35483869910240173f, 0.3870967626571655f, 0.4193548262119293f, 0.4516128897666931f, 0.4838709533214569f, 0.5161290168762207f, 0.5483871102333069f, 0.5806451439857483f, 0.6129032373428345f, 0.6451612710952759f, 0.6774193644523621f, 0.7096773982048035f, 0.7419354915618896f, 0.774193525314331f, 0.8064516186714172f, 0.8387096524238586f, 0.8709677457809448f, 0.9032257795333862f, 0.9354838728904724f, 0.9677419066429138f, 1.0 };
        this->VorticityConfinementMaskRamp = MakeDefaultRampCurve32(VORTICITYCONFINEMENTMASKRAMP_RAWDATA);
        this->XBoundary2.Set(0);
        this->FuelReactionRate.Set(0.1f);
        AxFp32 CONTROL_FIELD_RAMP_RAWDATA[32] = { 0.0f, 0.032258063554763794f, 0.06451612710952759f, 0.09677419066429138f, 0.12903225421905518f, 0.16129031777381897f, 0.19354838132858276f, 0.22580644488334656f, 0.25806450843811035f, 0.29032257199287415f, 0.32258063554763794f, 0.35483869910240173f, 0.3870967626571655f, 0.4193548262119293f, 0.4516128897666931f, 0.4838709533214569f, 0.5161290168762207f, 0.5483871102333069f, 0.5806451439857483f, 0.6129032373428345f, 0.6451612710952759f, 0.6774193644523621f, 0.7096773982048035f, 0.7419354915618896f, 0.774193525314331f, 0.8064516186714172f, 0.8387096524238586f, 0.8709677457809448f, 0.9032257795333862f, 0.9354838728904724f, 0.9677419066429138f, 1.0 };
        this->Control_field_ramp = MakeDefaultRampCurve32(CONTROL_FIELD_RAMP_RAWDATA);
        this->Pivot.Set(MakeVector3(0.0f, 0.0f, 0.0f));
        this->Size.Set(MakeVector3(10.0f, 10.0f, 10.0f));
        this->EnableDistortionClipGradient.Set(1);
        this->DissipationMaskFieldName.Set("temperature");
        this->UltraTurbSmokeRampWeight.Set(0.5f);
        this->EnableDistortion.Set(0);
        this->UltraTurbFireThreshold.Set(0.15f);
        this->Emitcdtemperature.Set(5000.0f);
        this->EnableEmitDensity.Set(0);
        this->Emitfield.Set("temperature");
        this->EnableCurlNoiseMaskField.Set(1);
        this->FireCoolingMaskField.Set("temperature");
        this->EnableVorticityConfinementMaskField.Set(0);
        this->DistorntionClipValue.Set(7.0f);
        this->CurlNoiseCore.Set(0);
        this->DistortionClampBelow.Set(0.1f);
        this->Emitcdfieldscale.Set(1.0f);
        this->DissipationMaskRange.Set(MakeVector2(0.0f, 1.0f));
        this->EnableCurlNoise.Set(0);
        this->Cdrange.Set(MakeVector2(0.0f, 1.0f));
        this->EnableCurlNoiseRamp.Set(0);
        this->UseKernelFuse.Set(0);
        this->ReflectionType.Set(0);
        this->VisualShadowItensity.Set(1.0f);
        this->FuelCreateSmoke.Set(0);
        this->VoxelSize.Set(0.1f);
        this->FieldBuildType.Set(0);
        this->SourceTemperatureFieldName.Set("temperature");
        this->Emitcdrange.Set(MakeVector2(0.0f, 1.0f));
        this->SourceVelAddition.Set(MakeVector3(0.0f, 1.0f, 0.0f));
        AxFp32 FIRECOOLINGRAMP_RAWDATA[32] = { 1.0f, 0.970967710018158f, 0.9419354796409607f, 0.9129031896591187f, 0.8838709592819214f, 0.8548386693000793f, 0.8258064389228821f, 0.79677414894104f, 0.7677419185638428f, 0.7387096285820007f, 0.7096774578094482f, 0.6806451678276062f, 0.6516129374504089f, 0.6225806474685669f, 0.5935484170913696f, 0.5645161271095276f, 0.5354838371276855f, 0.5064516067504883f, 0.47741934657096863f, 0.448387086391449f, 0.4193548262119293f, 0.39032256603240967f, 0.36129030585289f, 0.33225804567337036f, 0.3032258152961731f, 0.27419355511665344f, 0.2451612800359726f, 0.21612903475761414f, 0.18709677457809448f, 0.15806451439857483f, 0.12903225421905518f, 0.10000000149011612 };
        this->FireCoolingRamp = MakeDefaultRampCurve32(FIRECOOLINGRAMP_RAWDATA);
        this->SolverMehtodCore.Set(0);
        this->EnableAdvectFuel.Set(0);
        AxFp32 VISUALEMISSIONRAMP_RAWDATA[32] = { 0.0f, 0.032258063554763794f, 0.06451612710952759f, 0.09677419066429138f, 0.12903225421905518f, 0.16129031777381897f, 0.19354838132858276f, 0.22580644488334656f, 0.25806450843811035f, 0.29032257199287415f, 0.32258063554763794f, 0.35483869910240173f, 0.3870967626571655f, 0.4193548262119293f, 0.4516128897666931f, 0.4838709533214569f, 0.5161290168762207f, 0.5483871102333069f, 0.5806451439857483f, 0.6129032373428345f, 0.6451612710952759f, 0.6774193644523621f, 0.7096773982048035f, 0.7419354915618896f, 0.774193525314331f, 0.8064516186714172f, 0.8387096524238586f, 0.8709677457809448f, 0.9032257795333862f, 0.9354838728904724f, 0.9677419066429138f, 1.0 };
        this->VisualEmissionRamp = MakeDefaultRampCurve32(VISUALEMISSIONRAMP_RAWDATA);
        this->Emitcdadaptation.Set(0.15f);
        this->AlphaCommand.Set("");
        this->UltraTurbSizeFire.Set(0.5f);
        this->FuelCreateSmokeSourceField.Set(1);
        AxFp32 DISSIPATIONMASKRAMP_RAWDATA[32] = { 1.0f, 0.9914284348487854f, 0.9840909838676453f, 0.971743106842041f, 0.9481402635574341f, 0.9070376753807068f, 0.8430074453353882f, 0.750816285610199f, 0.6385942697525024f, 0.518476665019989f, 0.4025987982749939f, 0.3030959367752075f, 0.25696203112602234f, 0.2357529103755951f, 0.21554458141326904f, 0.1963111311197281f, 0.17802663147449493f, 0.1606651246547699f, 0.14420071244239807f, 0.12860745191574097f, 0.11385942995548248f, 0.09993068873882294f, 0.08679532259702682f, 0.07442738860845566f, 0.06280095130205154f, 0.05189009755849838f, 0.04166888818144798f, 0.03211139887571335f, 0.02319169230759144f, 0.014883844181895256f, 0.0071619232185184956f, 0.0 };
        this->DissipationMaskRamp = MakeDefaultRampCurve32(DISSIPATIONMASKRAMP_RAWDATA);
        this->VorticityConfinementScale.Set(1.0f);
        this->UseFireCoolingRamp.Set(0);
        this->EnableEmitTemperature.Set(0);
        this->UltraTurbScaleDensity.Set(0.2f);
        this->ReflectionAmount.Set(0.95f);
        this->DistortionPull.Set(0.5f);
        this->Emitcdrangeoverride.Set(1);
        this->SourceDensityFieldName.Set("density");
        AxFp32 VISUALDENSITYRAMP_RAWDATA[32] = { 0.0f, 0.032258063554763794f, 0.06451612710952759f, 0.09677419066429138f, 0.12903225421905518f, 0.16129031777381897f, 0.19354838132858276f, 0.22580644488334656f, 0.25806450843811035f, 0.29032257199287415f, 0.32258063554763794f, 0.35483869910240173f, 0.3870967626571655f, 0.4193548262119293f, 0.4516128897666931f, 0.4838709533214569f, 0.5161290168762207f, 0.5483871102333069f, 0.5806451439857483f, 0.6129032373428345f, 0.6451612710952759f, 0.6774193644523621f, 0.7096773982048035f, 0.7419354915618896f, 0.774193525314331f, 0.8064516186714172f, 0.8387096524238586f, 0.8709677457809448f, 0.9032257795333862f, 0.9354838728904724f, 0.9677419066429138f, 1.0 };
        this->VisualDensityRamp = MakeDefaultRampCurve32(VISUALDENSITYRAMP_RAWDATA);
        this->SourceDivergenceScale.Set(1.0f);
        this->TemperatureDiffusion.Set(0.5f);
        this->SourcingType.Set(0);
        this->SourceFuelFieldName.Set("fuel");
        this->EnableEmitVelocity.Set(0);
        this->UltraTurbSizeSmoke.Set(0.5f);
        this->Emitcdpreset.Set(0);
        this->YBoundary.Set(0);
        this->DistortionPush.Set(1.0f);
        this->EnableVorticityConfinement.Set(0);
        this->HeatCutoff.Set(0.2f);
        this->EnableVorticityConfinementMaskRamp.Set(0);
        this->ComputeArch.Set(0);
        this->CoolingRate.Set(0.75f);
        this->CurlNoiseMaskWeight.Set(0.5f);
        this->Shred_use_control_field.Set(0);
        this->TimeScale.Set(1.0f);
        this->VorticityConfinementMaskFieldName.Set("density");
        this->GSIterations.Set(10.0f);
        this->CurlNoiseClampBelow.Set(0.01f);
        this->ZBoundary.Set(0);
        this->XBoundary.Set(0);
        this->Blend.Set(0.2f);

    }
};

#endif